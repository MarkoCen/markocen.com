div
    div.image-block
        img(src='/img/auto_test_logo.jpg')

    p.
        ES6作为当下最火语言之一javascript的最新标准, 想必大家已经不再陌生, 愈来愈多前端项目在用ES6开发, 更不用说Nodejs这种后端
        js, 也是大力开发ES6的支持(最新Nodejs v6.0支持93%的ES6语法), 不难预测, 用ES6做js全栈开发是未来的大趋势. 而作为前端开发,
        自动化测试也是必不可少的一环, 从最初的单元测试, 再到后来的整合测试, 一套完整的自动化测试流程不仅可以在第一时间发现程序中的问题,
        还可以为之后的优化, 打包, 发布打下坚实的基础. 本文就通过一个小项目来说明如何搭建基于ES6代码的前端自动化测试环境.

    ul
        li
            a.link(href="#one") 使用工具库介绍
        li
            a.link(href="#two") 自动化测试流程描述
        li
            a.link(href="#three") 示例前端工程目录结构
        li
            a.link(href="#four") 搭建测试环境
        li
            a.link(href="#five") 设置自动化测试
        li
            a.link(href="#six") 运行自动化测试

    h3#one 使用工具库介绍

    p.
        先简单介绍下我们会用到的工具, 有个大概了解后, 具体如何安装和设置会在后面介绍:

    p.
        <span class="highlighter">Node.js</span> 这个是必须...

    p.
        <span class="highlighter">Karma</span> : Angular团队开发的前端javascript测试环境, 其特点是配置简单, 支持多平台测试, 开源并且社区资源丰富

    p.
        <span class="highlighter">Mocha</span> : 大家都熟悉的javascript测试框架, 不管前端后端都能用

    p.
        <span class="highlighter">Chai</span> : 测试断言库

    p.
        <span class="highlighter">Babel</span> : ES6怎能忘了Babel?

    p.
        <span class="highlighter">Webpack</span> : 静态文件打包库, 谁用谁知道


    h3#two 自动化测试流程描述

    p.
        介绍完工具, 再来看看我们即将搭建的自动化测试到底要做哪些事情, 首先我们会开启两个Karma测试服务器分别用来做单元化测试和整合测试, 每个服务器通过设置都会
        完成下面几个任务:

    ol
        li 读取相应的ES6测试脚本
        li 使用Babel将ES6转换成CommonJS形式
        li 根据每一个测试, 使用Webpack将CommonJS程序与依赖库打包并生成浏览器可以运行的javascript程序
        li 运行打包好的测试程序并显示测试报告
        li 监测源文件内容, 如有改变则自动重复上面几个步骤

    h3#three 示例前端工程目录结构

    p.
        再来看看即将用来测试的前端工程的目录结构, 本文只侧重于ES6的测试, 所以忽略了CSS, HTML以及其他一些前端的元素, 测试环境成熟后, 添加新的测试元素也是
        轻而易举的

    pre.
          app
           |-- public
           |     |--dist
           |         |-- bundle.js
           |
           |-- src
           |     |-- components
           |     |       |- Calculator.js
           |     |       |- Calculator.unit.spec.js
           |     |
           |     |-- services
           |            |- HttpService.js
           |            |- HttpService.unit.spec.js
           |
           |-- test
           |    |- integrate.spec.js
           |
           |-- karma.unit.config.js
           |-- karma.integrate.config.js
           |-- package.json
           |-- webpack.spec.js

    p.
        上面的目录结构是现在中小型项目常用的一种目录结构, <span class="code-inline">src</span>目录包含前端开发的源代码, 其中<span class="code-inline">components</span>
        目录包括了前端的组件, <span class="code-inline">services</span>目录包含了前端的服务,比如Http请求服务, 注意到每一个js文件都有一个对应的
        <span class="em">unit.spec.js</span>单元测试脚本.

    p.
        <span class="code-inline">public/dist</span>目录下是最终发布的代码, 一般是将源代码编译打包压缩成为一个js文件. <span class="code-inline">test</span>
        目录下保存着用于整合测试的脚本

    p.
        <span class="code-inline">karma.unit.config.js</span>文件用于设置Karma单元测试服务器的参数, 而<span class="code-inline">karma.integrate.config.js</span>
        用于设置Karma整合测试服务器的参数, <span class="code-inline">webpack.spec.js</span>用于Karma测试中Webpack预处理的配置

    h3#four 搭建测试环境

    p.
        好啦, 说了那么多,现在就开始搭建我们的自动化测试环境吧! 将下面的测试依赖模块添加到package.json中

    pre
        code.
            {
              "name": "awesome-es6-testing",
              "version": "1.0.0",
              "description": "",
              "scripts": {
                "test": ""
              },
              "keywords": [],
              "author": "",
              "license": "ISC",
              "dependencies": {

              },
              "devDependencies": {
                "babel": "^6.5.2",
                "babel-loader": "^6.2.4",
                "babel-preset-es2015": "^6.6.0",
                "chai": "^3.5.0",
                "karma": "^0.13.22",
                "karma-chai": "^0.1.0",
                "karma-chrome-launcher": "^0.2.3",
                "karma-mocha": "^0.2.2",
                "karma-webpack": "^1.7.0",
                "mocha": "^2.4.5",
                "webpack": "^1.13.0"
              }
            }

    p.
        然后安装依赖模块就可以啦, 接下来就是配置环境了

    pre
        code.
            npm inistall

    h3#five 设置自动化测试

    p.
        使用Karma最大的优点就是, 配置十分简单, 只需一个config文件就可以搞定, 所以设置其实就是如何写config文件. 下面是<span class="code-inline">karma.unit.config.js</span>
        的内容:

    pre
        code.
            module.exports = function(config) {
              config.set({

                //设置Karma server的根目录
                basePath: '',


                //设置Karma会用到的测试框架
                frameworks: ['mocha', 'chai'],


                //将Karma的debug.html页面用来显示Mocha的测试报告
                client: {
                  mocha: {
                    reporter: 'html'
                  }
                },


                //Karma要执行的测试文件, 这里只有webpack.unit.spec.js, 后面我们会看到这是为什么
                files: [
                  'webpack.spec.js'
                ],


                //设置对每一个测试进行的预处理, 因为我们是测试ES6文件,
                //所以我们要先用webpack将他们转化成浏览器支持的ES5文件
                preprocessors: {
                  'webpack.spec.js': [ 'webpack' ]
                },


                //对应webpack预处理的设置, 很简单, 只用到了babel-loader
                webpack: {
                  module: {
                    loaders: [
                      {
                        test: /\.js$/,
                        loader: 'babel',
                        query: {
                          presets: ['es2015']
                        }
                      }
                    ]
                  }
                },


                //禁止webpack在预处理输出日志信息
                webpackServer: {
                  noInfo: true
                },


                //设置Karma输出日志风格
                reporters: ['dots'],


                //设置Karma服务器的监听端口
                port: 9876,


                //设置Karma输出日志为彩色
                colors: true,


                //设置Karma输出日志级别, 级别高于INFO的才输出
                logLevel: config.LOG_INFO,


                //设置监测测试文件内容并自动运行更新的测试文件
                autoWatch: true,


                //设置测试所用浏览器
                browsers: ['Chrome'],


                //设置是否Karma配置只运行一次
                singleRun: true,


              })
            };

    p.
        再来看看唯一被执行的测试文件是如何写的:

    pre
        code.
            //webpack.spec.js

            var context = require.context('./src', true, /\.unit\.spec\.js$/);
            context.keys().forEach(context);

    p.
        很简单只有两行, 读取<span class="code-inline">src</span>下面所有的<span class="code-inline">*.unit.spec.js</span>文件.
        通过这种方式, 所有的单元测试脚本都会被执行, 并且每一个脚本都会生成一个单一的webpack打包文件

    p.
        整合测试的Karma config文件和上面的类似, 只是<span class="code-inline">files</span>一项是从<span class="code-inline">test</span>
        目录下读取, 并且不再需要webpack, 因为测试的是<span class="code-inline">dist</span>下的文件

    h3#six 运行自动化测试

    p.
        好了, 设置好以后我们就可以开始运行测试啦! 首先我们先看看<span class="code-inline">Calculator.unit.spec.js</span>的内容:

    pre
        code.
            import * as Calculator from './Calculator';

            describe('Calculator', () =>{
                describe('sum operation', () =>{
                    it('should sum up two operators', () =>{
                        assert.equal(2, Calculator.add(1, 1));
                    });
                });
            });

    p.
        可以看到Calculator测试脚本使用了ES6的新特性, 并且没有加载<span class="code-inline">Chai</span>模块, 这是因为我们安装了
        <span class="code-inline">karma-chai</span>和<span class="code-inline">karma-mocha</span>, 这两个模块会在Karma运行环境中添加Chai和Mocha
        的全局变量, 我们无需再手动导入.

    p.
        最后我们只要通过下面的命令启动Karma服务器就可以了, Karma服务器会根据设置开启Chrome浏览器, 并且读取测试脚本然后在浏览器中运行, 如果有任何测试脚本改变,
        Karma服务器会自动重新加载并重新运行

    pre
        code.
            karma start karma.unit.config.js